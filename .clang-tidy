# the checks with the hyphen prepended are disabled until they are fixed
Checks: 'bugprone-*,cert-*,clang-analyzer-*,concurrency-*,cppcoreguidelines-*,hicpp-*,misc-*,modernize-*,performance-*,portability-*,readability-*,
  -cppcoreguidelines-pro-type-cstyle-cast,
  -cppcoreguidelines-pro-type-vararg,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -readability-magic-numbers,
  -readability-function-cognitive-complexity,
  -readability-identifier-length,
  -bugprone-easily-swappable-parameters,
  -misc-non-private-member-variables-in-classes,
  -hicpp-vararg,
  -cppcoreguidelines-special-member-functions,
  -hicpp-special-member-functions,
  -cppcoreguidelines-pro-type-member-init,
  -hicpp-member-init,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -misc-const-correctness,
  -cppcoreguidelines-pro-type-const-cast,
  -hicpp-signed-bitwise,
  -cert-err58-cpp,
  -hicpp-multiway-paths-covered,
  -cert-dcl50-cpp,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -hicpp-no-array-decay,
  -bugprone-narrowing-conversions,
  -cppcoreguidelines-narrowing-conversions,
  -cert-err33-c,
  -concurrency-mt-unsafe,
  -bugprone-branch-clone,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-avoid-c-arrays,
  -hicpp-avoid-c-arrays,
  -modernize-avoid-c-arrays,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -misc-use-anonymous-namespace,
  -cppcoreguidelines-avoid-do-while,
  '
# don't treat clang diagnostic warnings (aka compiler warnings) as errors, to stop ci from failing due to these
# we can't suppress these like can be done for other checks above, they will always be outputted it seems
# these can however be suppressed by disabling the compiler warnings in meson, but that is not really what we want
# we cannot ignore clang-diagnostic-error, which are just compilation errors, which will occur when using clang < 16 (clang-tidy always wants clang for compilation it seems)
WarningsAsErrors: '*,
  -clang-diagnostic-deprecated-declarations,
  -clang-diagnostic-dangling-gsl,
  -clang-diagnostic-unused-private-field,
  '
HeaderFilterRegex: '*'
